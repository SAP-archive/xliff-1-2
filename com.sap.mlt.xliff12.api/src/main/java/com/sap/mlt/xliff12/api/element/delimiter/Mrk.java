package com.sap.mlt.xliff12.api.element.delimiter;

import java.util.Collection;
import java.util.List;

import com.sap.mlt.xliff12.api.attribute.Comment;
import com.sap.mlt.xliff12.api.attribute.Mid;
import com.sap.mlt.xliff12.api.attribute.Mtype;
import com.sap.mlt.xliff12.api.attribute.NonXliffAttribute;
import com.sap.mlt.xliff12.api.base.TextFragment;
import com.sap.mlt.xliff12.api.base.XliffElement;
import com.sap.mlt.xliff12.api.element.inline.Bpt;
import com.sap.mlt.xliff12.api.element.inline.Bx;
import com.sap.mlt.xliff12.api.element.inline.Ept;
import com.sap.mlt.xliff12.api.element.inline.Ex;
import com.sap.mlt.xliff12.api.element.inline.G;
import com.sap.mlt.xliff12.api.element.inline.It;
import com.sap.mlt.xliff12.api.element.inline.Ph;
import com.sap.mlt.xliff12.api.element.inline.X;
import com.sap.mlt.xliff12.api.text.Text;

/**
 * Marker - The Mrk element delimits a section of text that has special meaning,
 * such as a terminological unit, a proper name, an item that should not be
 * modified, etc. It can be used for various processing tasks. For example: to
 * indicate to a Machine Translation tool proper names that should not be
 * translated; for terminology verification; to mark suspect expressions after a
 * grammar checking. The Mrk element is usually not generated by the extraction
 * tool and it is not part of the tags used to merge the XLIFF file back into
 * its original format. The required {@link Mtype} attribute specifies what is
 * being delimited. The optional {@link com.sap.mlt.xliff12.api.attribute.Ts}
 * attribute was DEPRECATED in XLIFF 1.1. The optional {@link Comment} attribute
 * allow a free-form comment to be entered. A list of values for the
 * {@link Mtype} attribute is provided.
 * 
 * @author D049314
 */
public interface Mrk extends XliffElement, TextFragment {

	/**
	 * The element's name.
	 */
	static final String NAME = "mrk";

	/**
	 * Returns the <code>Mtype</code> attribute.
	 * 
	 * @return Returns the <code>Mtype</code> attribute.
	 */
	Mtype getMtype();

	/**
	 * Sets the <code>Mtype</code> attribute.
	 * 
	 * @param mtype
	 *            The <code>Mtype</code> attribute. Must not be
	 *            <code>null</code>.
	 */
	void setMtype(Mtype mtype);

	/**
	 * Returns the <code>Mid</code> attribute. Might be <code>null</code>.
	 * 
	 * @return Returns the <code>Mid</code> attribute. Might be
	 *         <code>null</code>.
	 */
	Mid getMid();

	/**
	 * Sets the <code>Mid</code> attribute.
	 * 
	 * @param mid
	 *            The <code>Mid</code> attribute. May be <code>null</code>.
	 */
	void setMid(Mid mid);

	/**
	 * Returns the <code>Ts</code> attribute. Might be <code>null</code>.
	 * 
	 * @return Returns the <code>Ts</code> attribute. Might be <code>null</code>
	 *         .
	 * 
	 * @deprecated The <code>Ts</code> attribute was DEPRECATED in version 1.1.
	 *             Instead, use attributes defined in a namespace different from
	 *             XLIFF.
	 */
	com.sap.mlt.xliff12.api.attribute.Ts getTs();

	/**
	 * Sets the <code>Ts</code> attribute.
	 * 
	 * @param ts
	 *            The <code>Ts</code> attribute. May be <code>null</code>.
	 * 
	 * @deprecated The <code>Ts</code> attribute was DEPRECATED in version 1.1.
	 *             Instead, use attributes defined in a namespace different from
	 *             XLIFF.
	 */
	void setTs(com.sap.mlt.xliff12.api.attribute.Ts ts);

	/**
	 * Returns the <code>Comment</code> attribute. Might be <code>null</code>.
	 * 
	 * @return Returns the <code>Comment</code> attribute. Might be
	 *         <code>null</code>.
	 */
	Comment getComment();

	/**
	 * Sets the <code>Comment</code> attribute.
	 * 
	 * @param comment
	 *            The <code>Comment</code> attribute. May be <code>null</code>.
	 */
	void setComment(Comment comment);

	/**
	 * Returns the non-XLIFF attributes.
	 * 
	 * @return Returns the non-XLIFF attributes.
	 */
	Collection<NonXliffAttribute> getNonXliffAttributes();

	/**
	 * Sets the non-XLIFF attributes.
	 * 
	 * @param nonXliffAttributes
	 *            The non-XLIFF attributes. Must not be <code>null</code>.
	 */
	void setNonXliffAttributes(Collection<NonXliffAttribute> nonXliffAttributes);

	/**
	 * Returns the content of this element. This is a list of any combination of
	 * {@link Text}s, {@link Bpt}s, {@link Ept}s, {@link Bx}s, {@link Ex}s
	 * {@link G}s, {@link It}, {@link Mrk}, {@link Ph}s and {@link X}s.
	 * 
	 * @return Returns the content of this element. This is a list of any
	 *         combination of {@link Text}s, {@link Bpt}s, {@link Ept}s,
	 *         {@link Bx}s, {@link Ex}s {@link G}s, {@link It}, {@link Mrk},
	 *         {@link Ph}s and {@link X}s.
	 */
	List<? extends TextFragment> getContent();

	/**
	 * Sets the content of this element.
	 * 
	 * @param content
	 *            The content. Must not be <code>null</code>. This can be any
	 *            combination of {@link Text}s, {@link Bpt}s, {@link Ept}s,
	 *            {@link Bx}s, {@link Ex}s {@link G}s, {@link It}, {@link Mrk},
	 *            {@link Ph}s and {@link X}s.
	 */
	void setContent(List<? extends TextFragment> content);

}
